"""Add student auth and class_code

Revision ID: 0726675f13b2
Revises: 
Create Date: 2025-04-09 23:17:39.157386

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector
import secrets
from sqlalchemy import text


# revision identifiers, used by Alembic.
revision = '0726675f13b2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    
    # Check if the timestamp column already exists in attendance table
    attendance_columns = [column['name'] for column in inspector.get_columns('attendance')]
    if 'timestamp' not in attendance_columns:
        with op.batch_alter_table('attendance', schema=None) as batch_op:
            batch_op.add_column(sa.Column('timestamp', sa.DateTime(), nullable=True))

    # Handle the class_code column separately to avoid unique constraint errors
    class_columns = [column['name'] for column in inspector.get_columns('class')]
    if 'class_code' not in class_columns:
        # First, add the column without a unique constraint
        op.add_column('class', sa.Column('class_code', sa.String(length=8), nullable=True))
        
        # Then, update each row with a unique code
        class_rows = conn.execute(text("SELECT id FROM class")).fetchall()
        for row in class_rows:
            class_id = row[0]
            unique_code = secrets.token_hex(4)  # Generate an 8-character hex code
            conn.execute(
                text("UPDATE class SET class_code = :code WHERE id = :id"),
                {"code": unique_code, "id": class_id}
            )
        
        # Make the column not nullable
        with op.batch_alter_table('class', schema=None) as batch_op:
            batch_op.alter_column('class_code', nullable=False)
            batch_op.create_unique_constraint('uq_class_code', ['class_code'])

    # Handle student table columns
    student_columns = [column['name'] for column in inspector.get_columns('student')]
    with op.batch_alter_table('student', schema=None) as batch_op:
        if 'email' not in student_columns:
            batch_op.add_column(sa.Column('email', sa.String(length=120), nullable=True))
        if 'password_hash' not in student_columns:
            batch_op.add_column(sa.Column('password_hash', sa.String(length=128), nullable=True))
        if 'face_encoding_complete' not in student_columns:
            batch_op.add_column(sa.Column('face_encoding_complete', sa.Boolean(), nullable=False, server_default='0'))
        
        # Check if we need to add unique constraint on email
        if 'email' in student_columns:
            try:
                batch_op.create_unique_constraint('uq_student_email', ['email'])
            except:
                # Constraint might already exist or we can't add it because of nulls/duplicates
                pass
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    try:
        with op.batch_alter_table('student', schema=None) as batch_op:
            batch_op.drop_constraint('uq_student_email', type_='unique')
            batch_op.drop_column('face_encoding_complete')
            batch_op.drop_column('password_hash')
            batch_op.drop_column('email')
    except:
        pass

    try:
        with op.batch_alter_table('class', schema=None) as batch_op:
            batch_op.drop_constraint('uq_class_code', type_='unique')
            batch_op.drop_column('class_code')
    except:
        pass

    try:
        with op.batch_alter_table('attendance', schema=None) as batch_op:
            batch_op.drop_column('timestamp')
    except:
        pass
    # ### end Alembic commands ###
